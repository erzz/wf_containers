[{"body":"Reusable workflows are called with a simple syntax and may expose both inputs (options to pass) and secrets (credentials and protected values).\n Provide inputs using the with: context Provide secrets with the secrets: context Optionally pin the version used e.g. @v1.2.0 or be brave and pin to @main branch which may be less reliable!  Check each workflow's docs to see which inputs and secrets you must provide either as mandatory or optional values.  To include a workflow - simply add it to any workflow in your current repository with the following pattern of usage.\n1jobs:2give-me-a-name:3uses:erzz/workflows/.github/workflows/reusable-workflow.yml@main4with:5input1:value16input2:value27secrets:8some-secret:${{ secrets.SOME_SECRET }}For more information and official docs see https://docs.github.com/en/actions/learn-github-actions/reusing-workflows#calling-a-reusable-workflow\n","link":"https://example.com/docs/","title":"Basics"},{"body":"Purpose Container workflows aim to build container images, push to a registry and test the container / Dockerfile for security issues and best practices.\nThere are two versions of the workflow:\n container.yml uses standard authentication with the registry using basic credentials, service account keys etc continer-oidc.yml (recommended) uses OIDC authentication between github and GCP  Jobs %%{init: {'theme': 'dark'}}%% flowchart LR subgraph build build-image[\"Build \u0026 push \\nto Registry\"] hadolint[\"Hadolint\"] end subgraph scan trivy[\"Trivy Image Scan\"] dockle[\"Dockle Image Scan\"] end build-image ==|on_success| trivy build-image ==|on_success| dockle  Build \u0026amp; Push to Registry Uses: mr-smithers-excellent/docker-build-push@v5\nBuilds a container image from Dockerfile and pushes to a registry of your choice. Incorporates automatic gitops-like tagging based on branch/tag/release\nHadolint Uses: hadolint/hadolint-action@v1.6.0\nLints the Dockerfile for best practices, minimisation tips and potential security issues\nTrivy Image Scan Uses: aquasecurity/trivy-action@master\nExcellent \u0026amp; very fast image scanner that finds vulnerabilities in OS packages and common language dependencies such as Node/Go/Java etc.\nDockle Uses: erzz/dockle-action@v1.1.1\nRuns a overlapping yet significantly different, set of security checks and best practice checks to Hadolint - with a focus on the final image as opposed to just the Dockerfile\n","link":"https://example.com/docs/container/","title":"Container Workflows"},{"body":"Purpose This workflow will:\n Analyze your semantic commit git history, and create a semantically versioned release if required Provides a standard configuration with option to disable and use the config already in your repository. Options to switch to maven version of the semantic-release configuration which also updates the version in pom.xml Option for a maven-settings.xml file to be created from a secret  Jobs %%{init: {'theme': 'dark'}}%% flowchart LR subgraph release semantic-release[\"Run Semantic Release\"] end  Run Semantic Release Uses: cycjimmy/semantic-release-action@v2.7.0\nRuns Semantic Release to analyse commit history and decide on whether a release should be created. If a release is created it takes care of semantic versioning, release notes, CHANGELOG.md etc\n","link":"https://example.com/docs/semantic-release/","title":"Semantic Release Workflow"},{"body":"Usage There are two alternative workflows (due to numerous actions limitations) depending on which type of authentication you use between Github Actions and GCP. If you want to use OIDC authentication then see container-oidc.yml\nUsing Service Account Key\n1build:2uses:erzz/workflows/.github/workflows/container.yml@main3with:4registry:\u0026#34;eu.gcr.io\u0026#34;5image:image-path/image-name6secrets:7user:_json_key8password:${{ secrets.SA_JSON }}Secrets    Input Required Details     wip for OIDC auth The workload identity provider to use with the container-oidc.yml workflow   service-account for OIDC auth The service account to impersonate when using the container-oidc.yml workflow   user for SA auth Username to use for authenticating with your target registry when using the container.yml workflow   password for SA auth Password to use for authenticating with your target registry when using the container.yml workflow   npm-token false If using a private NPM repo, provide the token and it will be exported as NPM_TOKEN in the workflow   mvn-settings-file false If a maven settings file is required provide the secret containing the file    Inputs    Input Required Default Details     image true N/A - REQUIRED The path and image name to create e.g. my-project/myapp Note: tags will be automatically created   registry false eu.gcr.io The domain name of the registry to push the built image to   dockerfile false Dockerfile Relative path to the Dockerfile to build from   build-args false N/A Comma separated list of environment variables to pass as build args   env-file false false If there is an .env file to include set to true - expects an artifact named env-file   mvn-settings false false Set to true in combination with the mvn-settings-file secret if a maven settings file is required   trivy-scan-type false os,library The comma separated list of the scan types to perform (no spaces!)   include-tests false true Set to false in order to skip the tests and only run the build \u0026amp; push job    Outputs    Output Description Example value     image-name The full registry and path of the built image eu.gcr.io/my-project/my-app   image-tag The image tag applied to the built image main-23f1a   branch The branch or tag for which the image was built main    Other Examples Using a Dockerfile that is not at repository root 1build:2needs:[env-file]3uses:erzz/workflows/.github/workflows/container.yml@main4with:5image:my-project/my-app6dockerfile:build/Dockerfile7secrets:8user:_json_key9password:${{ secrets.SA_JSON_KEY }}NodeJS container using private NPM registry plus a .env file from previous job 1build:2needs:[env-file]3uses:erzz/workflows/.github/workflows/container.yml@main4with:5registry:\u0026#34;eu.gcr.io\u0026#34;6image:my-project/my-app7build-args:NPM_TOKEN8env-file:true9trivy-scan-type:\u0026#34;os\u0026#34;10secrets:11user:_json_key12password:${{ secrets.SA_JSON_KEY }}13npm-token:${{ secrets.ARTIFACTORY_AUTH_TOKEN }}Go container using .env file from previous job and skipping the test jobs 1build:2needs:[env-file]3uses:erzz/workflows/.github/workflows/container.yml@main4with:5image:my-project/my-app6env-file:true7include-tests:false8secrets:9user:_json_key10password:${{ secrets.SA_JSON_KEY }}Maven-built Java container using a maven-settings.xml file 1jobs:2build:3uses:erzz/workflows/.github/workflows/container.yml@main4with:5image:my-project/my-app6mvn-settings:true7secrets:8user:_json_key9password:${{ secrets.SA_JSON_KEY }}10mvn-settings-file:${{ secrets.MAVEN_SETTINGS_FILE }}","link":"https://example.com/docs/container/container.yml/","title":"container.yml"},{"body":"Usage Simply include the workflow within your project's workflow using something like the following.\nNote: on.workflow_dispatch in this example means you intend to run the workflow manually. You can just as easily add the job into an automated flow instead where the job would run automatically or any other combination of release process.\n1name:Release2on:workflow_dispatch34jobs:5release:6uses:erzz/workflows/.github/workflows/semantic-release.yml@main7secrets:8token:${{ secrets.RELEASE_TOKEN }}Secrets    Input Required Default Details     token true N/A - REQUIRED A secret containing a GITHUB_TOKEN with permissions to create releases, push directly to master etc   maven-settings-file false N/A - REQUIRED If a maven settings file is required provide the secret containing the file    Inputs    Input Required Default Details     default-config false true If you have your own .releaserc.json already in you project - set this input to false   mvn-settings false false Should combine with default-config: false and special pom.xml updating config will be used    Outputs    Output Description Example value     new_release_published Returns true if a release was created true   new_release_version The version given to the release if created v1.2.0   new_release_notes The contents of the release notes if a release was created The full markdown of the release notes    Other Examples Run the job with a configuration already in your repo 1release:2uses:erzz/workflows/.github/workflows/semantic-release.yml@main3with:4default-config:false5secrets:6token:${{ secrets.RELEASE_TOKEN }}Maven projects and using a maven settings file With this combination of mvn-settings: true and mvn-settings-file: a special version of the workflow will run which will give the ability to both set a maven-settings file plus a semantic-release configuration that also updates pom.xml with the newly released version.\n1release:2uses:erzz/workflows/.github/workflows/semantic-release.yml@main3with:4default-config:false5mvn-settings:true6secrets:7token:${{ secrets.RELEASE_TOKEN }}8mvn-settings-file:${{ secrets.MAVEN_SETTINGS_FILE }}","link":"https://example.com/docs/semantic-release/release.yml/","title":"release.yml"},{"body":"Usage There are two alternative workflows (due to numerous actions limitations) depending on which type of authentication you use between Github Actions and GCP. If you want to use Basic or Service Account authentication then see container.yml\nUsing OIDC Authentication\n1build:2uses:erzz/workflows/.github/workflows/container-oidc.yml@main3with:4registry:\u0026#34;eu.gcr.io\u0026#34;5image:image-path/image-name6secrets:7wip:projects/012345678901/locations/global/workloadIdentityPools/github/providers/github8service-account:my-service-account@my-project.iam.gserviceaccount.comSecrets    Input Required Details     wip for OIDC auth The workload identity provider to use with the container-oidc.yml workflow   service-account for OIDC auth The service account to impersonate when using the container-oidc.yml workflow   user for SA auth Username to use for authenticating with your target registry when using the container.yml workflow   password for SA auth Password to use for authenticating with your target registry when using the container.yml workflow   npm-token false If using a private NPM repo, provide the token and it will be exported as NPM_TOKEN in the workflow   mvn-settings-file false If a maven settings file is required provide the secret containing the file    Inputs    Input Required Default Details     image true N/A - REQUIRED The path and image name to create e.g. my-project/myapp Note: tags will be automatically created   registry false eu.gcr.io The domain name of the registry to push the built image to   dockerfile false Dockerfile Relative path to the Dockerfile to build from   build-args false N/A Comma separated list of environment variables to pass as build args   env-file false false If there is an .env file to include set to true - expects an artifact named env-file   mvn-settings false false Set to true in combination with the mvn-settings-file secret if a maven settings file is required   trivy-scan-type false os,library The comma separated list of the scan types to perform (no spaces!)   include-tests false true Set to false in order to skip the tests and only run the build \u0026amp; push job    Outputs    Output Description Example value     image-name The full registry and path of the built image eu.gcr.io/my-project/my-app   image-tag The image tag applied to the built image main-23f1a   branch The branch or tag for which the image was built main    Other Examples Using a Dockerfile that is not at repository root 1build:2needs:[env-file]3uses:erzz/workflows/.github/workflows/container.yml@main4with:5image:my-project/my-app6dockerfile:build/Dockerfile7secrets:8user:_json_key9password:${{ secrets.SA_JSON_KEY }}NodeJS container using private NPM registry plus a .env file from previous job 1build:2needs:[env-file]3uses:erzz/workflows/.github/workflows/container.yml@main4with:5registry:\u0026#34;eu.gcr.io\u0026#34;6image:my-project/my-app7build-args:NPM_TOKEN8env-file:true9trivy-scan-type:\u0026#34;os\u0026#34;10secrets:11user:_json_key12password:${{ secrets.SA_JSON_KEY }}13npm-token:${{ secrets.ARTIFACTORY_AUTH_TOKEN }}Go container using .env file from previous job and skipping the test jobs 1build:2needs:[env-file]3uses:erzz/workflows/.github/workflows/container.yml@main4with:5image:my-project/my-app6env-file:true7include-tests:false8secrets:9user:_json_key10password:${{ secrets.SA_JSON_KEY }}Maven-built Java container using a maven-settings.xml file 1jobs:2build:3uses:erzz/workflows/.github/workflows/container.yml@main4with:5image:my-project/my-app6mvn-settings:true7secrets:8user:_json_key9password:${{ secrets.SA_JSON_KEY }}10mvn-settings-file:${{ secrets.MAVEN_SETTINGS_FILE }}","link":"https://example.com/docs/container/container-oidc.yml/","title":"container-oidc.yml"},{"body":"Reusable workflows for Github Actions Instead of copy \u0026amp; pasting a ton of workflow files and tweaking for each project, using reusable workflows has numerous advantages:\n Less CI \u0026amp; CD code to maintain! Apply a single change across many projects instead of dozens of PR's Consistency in knowing that all projects are built and tested in the same way Get up and running with new projects much faster!  Feel free to open a PR, raise an issue or request a new feature / workflow.  As of January 2022, this project is still a work in progress! There will be many updates, fixes and changes whilst the project takes shape. So it is HIGHLY recommended that you pin the version of workflows you use for stability.\nTo get updates to your workflows in a more controlled way, I highly recommend setting up Renovate and you will receive a PR automatically as new versions are released.\n Read the DocsGo to the source\n   ","link":"https://example.com/","title":"erzz/workflows"}]