name: Execute Semantic Release
on:
  workflow_call:
    inputs:
      default-config:
        required: false
        type: boolean
        description: "To use a config you have in your repository already - set to false. Otherwise uses the config in this respository."
        default: true
      branches:
        required: false
        type: string
        description: "Use to override branches attribute in the .releaserc.json (used mostly for testing)"
      dry-run:
        required: false
        type: boolean
        description: "Used to only preview the release result and notes for testing. Set to true to enable"
        default: false
      create-floating-tag:
        required: false
        type: boolean
        description: "Set to `true` to create an additional floating tag e.g. for release `v1.3.0` also create/move `v1` to the same SHA"
        default: false
      mvn-settings:
        required: false
        type: boolean
        description: "If this is a maven project, set to true and disable default-config"
        default: false
      npm-artifactory:
        required: false
        type: boolean
        description: "If you need to authenticate with artifactory to publish packages set to `true`"
        default: false
    secrets:
      token:
        required: true
        description: "A secret containing a Github PAT with relevant permissions to publish releases"
      mvn-settings-file:
        required: false
        description: "If a maven settings file is required for build then add it here"
      npm-token:
        required: false
        description: "If an NPM_TOKEN env var is required for build then add it here"
      artifactory-user:
        required: false
        description: "Username to authenticate with artifactory"
      artifactory-password:
        required: false
        description: "Password or Token to authenticate with artifactory"
    outputs:
      new_release_published:
        description: "Whether a new release was published (true or false)"
        value: ${{ jobs.release.outputs.new_release_published }}
      new_release_version:
        description: "Version of the new release e.g. `1.3.0`"
        value: ${{ jobs.release.outputs.new_release_version }}
      new_release_major_version:
        description: "Major version of the new release e.g. `1`"
        value: ${{ jobs.release.outputs.new_release_major_version }}
      new_release_minor_version:
        description: "Minor version of the new release e.g. `3`"
        value: ${{ jobs.release.outputs.new_release_minor_version }}
      new_release_patch_version:
        description: "Patch version of the new release e.g. `0`"
        value: ${{ jobs.release.outputs.new_release_patch_version }}
      new_release_notes:
        description: "The release notes for the new release"
        value: ${{ jobs.release.outputs.new_release_notes }}
      ref-slug:
        description: "A URL sanitized version of the github ref"
        value: ${{ jobs.release.outputs.ref-slug }}
      short-sha:
        description: "Captures the short SHA for use in this or later workflow jobs"
        value: ${{ jobs.release.outputs.short-sha }}

jobs:
  # <--------------- RUN SEMANTIC RELEASE ---------------->
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    outputs:
      new_release_published: ${{ steps.semantic-release.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic-release.outputs.new_release_version }}
      new_release_notes: ${{ steps.semantic-release.outputs.new_release_notes }}
      new_release_major_version: ${{ steps.semantic-release.outputs.new_release_major_version }}
      new_release_minor_version: ${{ steps.semantic-release.outputs.new_release_minor_version }}
      new_release_patch_version: ${{ steps.semantic-release.outputs.new_release_patch_version }}
      short-sha: ${{ env.GITHUB_SHA_SHORT }}
      ref-slug: ${{ env.GITHUB_REF_SLUG_URL }}
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Slugify github variables
        uses: rlespinasse/github-slug-action@4.2.4

      - name: Export NPM token
        run: echo "NPM_TOKEN=${{ secrets.npm-token }}" >> $GITHUB_ENV

      - name: Include maven-settings.xml
        if: ${{ inputs.mvn-settings }}
        env:
          # Hack to handle passing of strings with mixed quotes
          FILE: ${{ secrets.mvn-settings-file }}
        run: |
          echo "Creating maven-settings.xml..."
          echo "$FILE" > maven-settings.xml

      - name: NPM Auth with Artifactory
        if: ${{ inputs.npm-artifactory }}
        run: curl -u ${{ secrets.artifactory-user }}:${{ secrets.artifactory-password }} https://artifactory.build.ingka.ikea.com/artifactory/api/npm/auth >> .npmrc

      - name: Get Configuration
        if: ${{ inputs.default-config }}
        run: |
          echo "Fetching default configuration from erzz/configs..."
          curl --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            --header 'Accept: application/vnd.github.v3.raw' \
            --location https://api.github.com/repos/erzz/configs/contents/configs/semantic-release-config.json \
            --fail \
            --output .releaserc.json || exit 1
          cat .releaserc.json

      - name: Get MVN Configuration
        if: ${{ inputs.mvn-settings }}
        run: |
          echo "Fetching Maven configuration from erzz/configs..."
          curl --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            --header 'Accept: application/vnd.github.v3.raw' \
            --location https://api.github.com/repos/erzz/configs/contents/configs/semantic-release-config-mvn.json \
            --fail \
            --output .releaserc.json || exit 1
          cat .releaserc.json

      - name: Semantic Release
        id: semantic-release
        uses: cycjimmy/semantic-release-action@v3.4.2
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
        with:
          dry_run: ${{ inputs.dry-run }}
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
            conventional-changelog-conventionalcommits
            @semantic-release/exec

  floating-tag:
    name: Create floating tag
    needs: release
    if: ${{ needs.release.outputs.new_release_published == 'true' && inputs.create-floating-tag }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Get Release SHA
        id: sha
        run: |
          SHA=$(git show-ref --hash v${{ needs.release.outputs.new_release_version }})
          echo "SHA for v${{ needs.release.outputs.new_release_version }}: $SHA"
          echo "::set-output name=sha::$SHA"

      - name: Create floating tag
        uses: 'actions/github-script@v6'
        env:
          SHA: ${{ steps.sha.outputs.sha }}
        with:
          github-token: ${{ secrets.token }}
          script: |-
            const sha = process.env.SHA;
            const major = 'v${{ needs.release.outputs.new_release_major_version }}';

            // If exists then update, else create
            try {
              await github.rest.git.updateRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${major}`,
                sha: sha,
                force: true,
              });
              core.info(`Updated ${major} to ${sha}`);
            } catch(err) {
              core.info(`Failed to update ${major}: ${err}`);
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${major}`,
                sha: sha,
              });
              core.info(`Created ${major} at ${sha}`);
            }
